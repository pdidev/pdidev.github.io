#!/bin/bash
set -ex

if [ $# -ne 4 ]
then
    echo "Usage: $0 <directory> <gitlab URL> <project NAME> <GitHub project NAME>" >&2
    exit 1
fi

DEPLOY_DIR="${1}"
mkdir -p "${DEPLOY_DIR}"
cd "${DEPLOY_DIR}"
DEPLOY_DIR="${PWD}"

GITLAB_URL="$2"

PROJECT_NAME="$3"
GH_PROJECT_NAME="$4"

set +x
if [ -z ${CI_PAGES_TOKEN} ]
then
	echo "CI_PAGES_TOKEN is unset"
	exit 1
fi
set -ex

cd "$(mktemp -t -d WEB_DEPLOY.tmdir.XXXXXXXXXXXX || exit 1)"
WORK_DIR="${PWD}"
trap "cd '${DEPLOY_DIR}'; rm -rf '${WORK_DIR}'" EXIT
mkdir -p "${WORK_DIR}/public/"

cat << EOF > "${WORK_DIR}/public/index.html"
<!doctype html>
<html lang=en>
<head>
<meta charset=utf-8>
<title>PDI: Documentation versions</title>
</head>
<body>
<h1>PDI documentation for:</h1>
<ul>
EOF


########################
##	GITHUB
########################
DOWNLOAD_URL=$(curl -fsS -H "Authorization: Bearer ${CI_PAGES_TOKEN}" https://api.github.com/repos/${GH_PROJECT_NAME}/actions/artifacts \
| jq -r '.artifacts
    | map(select(.workflow_run.head_branch=="main" and .name == "pages"))
    | sort_by(.created_at)
    | last
    | .archive_download_url')
mkdir -p "${WORK_DIR}/public/main"
cd "${WORK_DIR}/public/main"
curl -H "Authorization: Bearer ${CI_PAGES_TOKEN}" -LfsSo artifacts.zip "${DOWNLOAD_URL}"
unzip -o -d public artifacts.zip
rm artifacts.zip
while [ 1 -eq "$(find . -mindepth 1 -maxdepth 1|wc -l)" ]
do
    SUBDIR="$(find . -mindepth 1 -maxdepth 1)"
    find "$SUBDIR" -mindepth 1 -maxdepth 1 -exec mv '{}' . ';'
    rmdir "$SUBDIR"
done
echo "<li><a href='main/'>latest version from GIT</a></li>" >> "${WORK_DIR}/public/index.html"




curl -fsS -H "Authorization: Bearer ${CI_PAGES_TOKEN}" https://api.github.com/repos/${GH_PROJECT_NAME}/actions/artifacts \
| jq -cr '.artifacts
    | map(select(.name == "pages" and (.workflow_run.head_branch
    | test("^v[0-9]+\\.[0-9]+$"))))
    | group_by(.workflow_run.head_branch)
    | map(sort_by(.created_at))
    | map(last)
    | map({url:.archive_download_url,branch:.workflow_run.head_branch})
    | .[]' \
| while read TAG_INFO
do
    DOWNLOAD_URL="$(jq -r .url <<< "$TAG_INFO")"
    TAG="$(jq -r .branch <<< "$TAG_INFO" | sed 's/^v//')"
    mkdir -p "${WORK_DIR}/public/${TAG}"
    cd "${WORK_DIR}/public/${TAG}"
    curl -H "Authorization: Bearer ${CI_PAGES_TOKEN}" -LfsSo artifacts.zip "${DOWNLOAD_URL}"
    unzip -o -d public artifacts.zip
    rm artifacts.zip
    while [ 1 -eq "$(find . -mindepth 1 -maxdepth 1|wc -l)" ]
    do
        SUBDIR="$(find . -mindepth 1 -maxdepth 1)"
        find "$SUBDIR" -mindepth 1 -maxdepth 1 -exec mv '{}' . ';'
        rmdir "$SUBDIR"
    done
    echo "<li><a href='${TAG}/'>version ${TAG}</a></li>" >> "${WORK_DIR}/public/index.html"
done




########################
##	GITLAB
########################
INERROR=true
ALLTAGS="$(curl -fsS "${GITLAB_URL}/api/v4/projects/${PROJECT_NAME}/repository/tags" | tr ',' '\n' | grep '"name"' | tr '"' ' ' | awk '{print $4}' | grep '^[0-9]*\.[0-9]*\.[0-9]*$' | sort -rVu)"
for TAG_BASE in $(echo "${ALLTAGS}" | sed 's/^\([0-9]*\.[0-9]*\.\)[0-9]*$/\1/' | sort -rVu)
do
    for TAG in $(echo "${ALLTAGS}" | fgrep "${TAG_BASE}" | sort -rVu)
    do
        cd "${WORK_DIR}"
        mkdir -p "${TAG}"
        cd "${TAG}"
        if curl -fsSo artifacts.zip "${GITLAB_URL}/api/v4/projects/${PROJECT_NAME}/jobs/artifacts/${TAG}/download?job=pages"
        then
            INERROR=false
            STAG="$(echo "${TAG}" | sed 's/\.[0-9]*$//')"
            unzip -o artifacts.zip
            rm artifacts.zip
            if [ -d "public/${TAG}" ]
            then
                mv "public/${TAG}" "${WORK_DIR}/public/${STAG}"
            elif [ -d "${TAG}" ]
            then
                mv "${TAG}" "${WORK_DIR}/public/${STAG}"
            elif [ -d "public" ]
            then
                mv public "${WORK_DIR}/public/${STAG}"
            fi
            echo "<li><a href='${STAG}/'>version ${STAG}</a></li>" >> "${WORK_DIR}/public/index.html"
            cd "${WORK_DIR}"
            rm -rf "${WORK_DIR}/${TAG}"
            break
        fi
        cd "${WORK_DIR}"
        rm -rf "${WORK_DIR}/${TAG}"
    done
done



if [ true = "${INERROR}" ]
then
    rm -rf "${WORK_DIR}"
    exit 1
fi




cat << EOF >> "${WORK_DIR}/public/index.html"
</ul>
</body>
EOF


mv "${WORK_DIR}/public"/* "${DEPLOY_DIR}"
